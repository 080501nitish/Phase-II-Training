// <auto-generated />
using System;
using Bucket.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bucket.Migrations
{
    [DbContext(typeof(BucketContext))]
    [Migration("20230819044119_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bucket.Models.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"));

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CommentedAt")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProjectID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Bucket.Models.Like", b =>
                {
                    b.Property<int>("LikeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeID"));

                    b.Property<int?>("ProjectID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("LikeID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UserID");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Bucket.Models.Media", b =>
                {
                    b.Property<int>("MediaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaID"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("MediaID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("Bucket.Models.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectID"));

                    b.Property<DateTime?>("ProjectCreatedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ProjectID");

                    b.HasIndex("UserID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Bucket.Models.ProjectTag", b =>
                {
                    b.Property<int>("ProjectTagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectTagID"));

                    b.Property<int?>("ProjectID")
                        .HasColumnType("int");

                    b.Property<int?>("TagID")
                        .HasColumnType("int");

                    b.HasKey("ProjectTagID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("TagID");

                    b.ToTable("ProjectTags");
                });

            modelBuilder.Entity("Bucket.Models.Tag", b =>
                {
                    b.Property<int>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagID"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Bucket.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("UserBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPrfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Bucket.Models.Comment", b =>
                {
                    b.HasOne("Bucket.Models.Project", "Projects")
                        .WithMany("Comments")
                        .HasForeignKey("ProjectID");

                    b.HasOne("Bucket.Models.User", "Users")
                        .WithMany("Comments")
                        .HasForeignKey("UserID");

                    b.Navigation("Projects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Bucket.Models.Like", b =>
                {
                    b.HasOne("Bucket.Models.Project", "Projects")
                        .WithMany("Likes")
                        .HasForeignKey("ProjectID");

                    b.HasOne("Bucket.Models.User", "Users")
                        .WithMany("Likes")
                        .HasForeignKey("UserID");

                    b.Navigation("Projects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Bucket.Models.Media", b =>
                {
                    b.HasOne("Bucket.Models.Project", "Projects")
                        .WithMany("Media")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Bucket.Models.Project", b =>
                {
                    b.HasOne("Bucket.Models.User", "Users")
                        .WithMany("Projects")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Bucket.Models.ProjectTag", b =>
                {
                    b.HasOne("Bucket.Models.Project", "Projects")
                        .WithMany("ProjectTags")
                        .HasForeignKey("ProjectID");

                    b.HasOne("Bucket.Models.Tag", "Tags")
                        .WithMany("ProjectTags")
                        .HasForeignKey("TagID");

                    b.Navigation("Projects");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Bucket.Models.Project", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Media");

                    b.Navigation("ProjectTags");
                });

            modelBuilder.Entity("Bucket.Models.Tag", b =>
                {
                    b.Navigation("ProjectTags");
                });

            modelBuilder.Entity("Bucket.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
